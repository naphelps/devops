# Legacy versions of compose do not support name.
# name: open-horizon

networks:
  horizonnet:
    driver: bridge
    name: hzn_horizonnet

services:
  agbot:
    image: ${AGBOT_IMAGE_NAME}:${AGBOT_IMAGE_TAG}
    container_name: agbot
    restart: always
    ports:
      - 127.0.0.1:${AGBOT_PORT}:${AGBOT_INTERNAL_PORT}
      - ${HZN_LISTEN_IP}:${AGBOT_SECURE_PORT}:${AGBOT_INTERNAL_SECURE_PORT}
    networks:
      - horizonnet
    volumes:
      - ${ETC}/horizon/agbot.json:/etc/horizon/anax.json.tmpl:${VOLUME_MODE}
      # deploy-mgmt-hub.sh will ensure this dir is empty if we want to use http
      - ${CERT_DIR}:/home/agbotuser/keys:${VOLUME_MODE}
      # when docker mounts this it "inherits" the permissions of the existing msgKey dir (which the agbot dockerfile sets the permissions correctly)
      - agbotmsgkeyvol:/var/horizon/msgKey
    environment:
      - ANAX_LOG_LEVEL=${ANAX_LOG_LEVEL}
      # HZN_VAR_BASE will default to /var/horizon, which is what we want
      # - HZN_VAR_BASE=/home/agbotuser
    healthcheck:
      # Need to wait a while for this, because the deployment script does not add the org, user, agbot until after the containers are up
      test: test $$(curl -sS -w %{http_code} -o /dev/null http://localhost:8080/status) -eq 200
      interval: 20s
      timeout: 5s
      retries: 4
    depends_on:
      - exchange-api
      - css-api
      - postgres-exchange
      - bao

  exchange-api:
    image:  ${EXCHANGE_IMAGE_NAME}:${EXCHANGE_IMAGE_TAG}
    container_name: exchange-api
    restart: always
    ports:
      - ${HZN_LISTEN_IP}:${EXCHANGE_PORT}:8080
    networks:
      - horizonnet
    environment:
      # Variables for use with Exchange v2.124.0+
      ## Minimal
      - EXCHANGE_DB_HOST=postgres
      - EXCHANGE_DB_NAME=${EXCHANGE_DATABASE}
      - EXCHANGE_DB_PORT=${POSTGRES_PORT}
      - EXCHANGE_DB_PW=${EXCHANGE_DB_PW}
      - EXCHANGE_DB_USER=${POSTGRES_USER}
      - EXCHANGE_ROOT_PW=${EXCHANGE_ROOT_PW}
      ## Advanced
      - EXCHANGE_CHANGES_TRIM
      - EXCHANGE_CHANGES_TTL
      - EXCHANGE_DB_NUMTHREADS
      - EXCHANGE_DB_QUEUE_SIZE
      - EXCHANGE_DB_UPGRADE_TIMEOUT
      - EXCHANGE_LANGUAGE
      - EXCHANGE_HUBADMINS
      - EXCHANGE_MAX_AGBOTS
      - EXCHANGE_MAX_AGREEMENTS
      - EXCHANGE_MAX_CHANGES
      - EXCHANGE_MAX_DEPLOY_POLICIES
      - EXCHANGE_MAX_MGMT_POLICIES
      - EXCHANGE_MAILBOX_SIZE
      - EXCHANGE_MAX_NODES
      - EXCHANGE_MAX_DEPLOY_PATTERNS
      - EXCHANGE_MAX_SERVICES
      - EXCHANGE_PEKKO_HTTP_PORT
      - EXCHANGE_PEKKO_HTTPS_PORT
      - EXCHANGE_PEKKO_LOGLEVEL=${EXCHANGE_PEKKO_LOGLEVEL:-$EXCHANGE_LOG_LEVEL}
      - EXCHANGE_TLS_PASSWORD=${EXCHANGE_TLS_PASSWORD:-}
      - EXCHANGE_TLS_TRUSTSTORE
      - HIKARICP_MINIMUMIDLE
      - HIKARICP_IDLETIMEOUT
    volumes:
      - ${ETC}/horizon/exchange.json:/etc/horizon/exchange/exchange-api.tmpl:${VOLUME_MODE} # [DEPRECATED] in v2.124.0+
      - ${CERT_DIR}:/etc/horizon/exchange/keys:${VOLUME_MODE}
    # Note: compose version 3 does this health check forever, so do not do it very often. Plus it is no longer a condition for starting services dependent on it.
    healthcheck:
      test: test $$(curl -sS -w %{http_code} -k -o /dev/null ${HZN_TRANSPORT}://localhost:8080/v1/admin/version) -eq 200
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      - postgres-exchange

  postgres-exchange:
    image: ${POSTGRES_IMAGE_NAME}:${POSTGRES_IMAGE_TAG}
    container_name: postgres
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - horizonnet
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      - POSTGRES_DB=${EXCHANGE_DATABASE}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - POSTGRES_PASSWORD=${EXCHANGE_DB_PW}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 15s
      timeout: 5s
      retries: 3

  css-api:
    image: ${CSS_IMAGE_NAME}:${CSS_IMAGE_TAG}
    container_name: css-api
    restart: always
    ports:
      - ${HZN_LISTEN_IP}:${CSS_PORT}:8080
    networks:
      - horizonnet
    volumes:
      - ${ETC}/horizon/css.conf:/etc/edge-sync-service/sync.conf.tmpl:${VOLUME_MODE}
      # deploy-mgmt-hub.sh will ensure this dir is empty if we want to use http
      - ${CERT_DIR}:/home/cssuser/keys:${VOLUME_MODE}
      # i do not think this needed in this container
      #- mongovol:/var/edge-sync-service/persist
    environment:
      #todo: change this back to HZN_EXCHANGE_URL=${HZN_TRANSPORT}://exchange-api:8080/v1 when https://github.com/open-horizon/anax/issues/2628 is fixed.
      - HZN_EXCHANGE_URL=http://exchange-api:${EXCHANGE_HTTP_PORT}/v1
    healthcheck:
      test: test $$(curl -sS -w %{http_code} -k -u ${EXCHANGE_USER_ORG}/admin:${EXCHANGE_USER_ADMIN_PW} -o /dev/null ${HZN_TRANSPORT}://localhost:8080/api/v1/health) -eq 200
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      - exchange-api
      - mongo

  mongo:
    image: ${MONGO_IMAGE_NAME}:${MONGO_IMAGE_TAG}
    container_name: mongo
    restart: always
    networks:
      - horizonnet
    volumes:
      - mongovol:/var/edge-sync-service/persist
    healthcheck:
      test: echo show dbs | ${MONGO_UTILITY} localhost:${MONGO_PORT}/test --quiet
      interval: 15s
      timeout: 5s
      retries: 3

  fdo-owner-services:
    image: ${FDO_OWN_SVC_IMAGE_NAME}:${FDO_OWN_SVC_IMAGE_TAG}
    container_name: fdo-owner-services
    restart: always
    ports:
      - ${FDO_OWN_SVC_PORT}:8042
      - ${FDO_OWN_COMP_SVC_PORT}:9008
    networks:
      - horizonnet
    volumes:
      - type: volume
        source: fdo-ocs-db
        target: ${FDO_OCS_DB_CONTAINER_DIR}
    environment:
      - FDO_DB_PASSWORD=${FDO_OWN_SVC_DB_PASSWORD}
      - FDO_OPS_SVC_HOST=${HZN_LISTEN_IP}:${FDO_OWN_SVC_PORT}
      - FDO_DB_USER=${FDO_OWN_SVC_DB_USER}
      - FDO_DB_URL=${FDO_OWN_SVC_DB_URL}
      - HZN_FDO_API_URL=${HZN_TRANSPORT}://${HZN_LISTEN_IP}:${FDO_OWN_SVC_PORT}
      - FDO_API_PWD=${FDO_OWN_SVC_AUTH}
      - FDO_OCS_DB_PATH=${FDO_OCS_DB_CONTAINER_DIR}
      - FDO_OCS_SVC_PORT=${FDO_OWN_COMP_SVC_PORT}
      - FDO_OCS_SVC_TLS_PORT=${FDO_OWN_COMP_SVC_PORT}
      - FDO_OPS_PORT=${FDO_OWN_SVC_PORT}
      - FDO_OPS_EXTERNAL_PORT=${FDO_OWN_SVC_PORT}
      - HZN_EXCHANGE_URL=${HZN_EXCHANGE_URL}
      - EXCHANGE_INTERNAL_URL=${EXCHANGE_INTERNAL_URL}
      - EXCHANGE_INTERNAL_CERT=${EXCHANGE_INTERNAL_CERT}
      - EXCHANGE_INTERNAL_RETRIES=${EXCHANGE_INTERNAL_RETRIES}
      - EXCHANGE_INTERNAL_INTERVAL=${EXCHANGE_INTERNAL_INTERVAL}
      - HZN_FSS_CSSURL=${HZN_FSS_CSSURL}
      - HZN_MGMT_HUB_CERT=${HZN_MGMT_HUB_CERT}
      - FDO_GET_PKGS_FROM=${FDO_GET_PKGS_FROM}
      - FDO_GET_CFG_FILE_FROM=${FDO_GET_CFG_FILE_FROM}
      - VERBOSE=${FDO_OWN_SVC_VERBOSE}
    healthcheck:
      test: test $$(curl -sS -w %{http_code} -o /dev/null -X GET ${HZN_TRANSPORT}://${HZN_LISTEN_IP}:${FDO_OWN_COMP_SVC_PORT}/api/version) -eq 200
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      - css-api
      - exchange-api
      - postgres-fdo

  postgres-fdo:
    image: ${POSTGRES_IMAGE_NAME}:${POSTGRES_IMAGE_TAG}
    container_name: postgres-fdo-owner-service
    restart: always
    volumes:
      - postgresvolfdo:/var/lib/postgresql/data
    networks:
      - horizonnet
    ports:
      - ${FDO_OWN_SVC_DB_PORT}:5432
    environment:
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - POSTGRES_DB=${FDO_OWN_SVC_DB}
      - POSTGRES_PASSWORD=${FDO_OWN_SVC_DB_PASSWORD}
      - POSTGRES_USER=${FDO_OWN_SVC_DB_USER}
    healthcheck:
      test: pg_isready -U ${FDO_OWN_SVC_DB_USER}
      interval: 15s
      timeout: 5s
      retries: 3

  bao:
    image: ${BAO_IMAGE_NAME}:${BAO_IMAGE_TAG}
    container_name: bao
    restart: always
    ports:
      - ${HZN_LISTEN_IP}:${BAO_PORT}:${BAO_PORT}
    networks:
      - horizonnet
    volumes:
      - bao-vol:/openbao/file
      - bao-logs-vol:/openbao/logs
      - /tmp/horizon-all-in-1/openbao/plugins/openbao-plugin-auth-openhorizon:/openbao/plugins/openbao-plugin-auth-openhorizon:ro
    environment:
      # This is sudo redundant and is here for the purposes of preventing production scripts from running when starting a container.
      # The environment variable does take precedence over the configuration file (listener.tcp.address).
      - BAO_LOG_LEVEL=${BAO_LOG_LEVEL}
      - BAO_API_ADDR=${BAO_API_ADDR}
      - BAO_LOCAL_CONFIG=${BAO_LOCAL_CONFIG}
    command: ["server"]
    healthcheck:
      test: test $$(curl -sS -w %{http_code} -k -o /dev/null ${HZN_TRANSPORT}://${HZN_LISTEN_IP}:${BAO_PORT}/v1/sys/seal-status) -eq 200
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      - exchange-api

# For legacy versions of docker compose only.
version: '3.9'

# Listing the volumes here makes them persistent across container restarts
volumes:
  postgres:
  postgresvolfdo:
  mongovol:
  agbotmsgkeyvol:
  fdo-ocs-db:
  bao-vol:
  bao-logs-vol:
